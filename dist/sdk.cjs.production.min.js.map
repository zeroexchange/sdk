{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../node_modules/regenerator-runtime/runtime.js","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÃ–RLI = 5,\n  KOVAN = 42,\n  FUJI = 43113,\n  AVALANCHE = 43114,\n  SMART_CHAIN = 56,\n  SMART_CHAIN_TEST = 97,\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x2Ef422F30cdb7c5F1f7267AB5CF567A88974b308'\nexport const INIT_CODE_HASH = '0x4b5b254233f8aba1e01c0538653d54036e3c9f7873daf99623bb358f1cf33188'\n\n// export const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n// export const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const FACTORY_AND_INIT: any = {\n  [ChainId.MAINNET]: {\n    factoryAddress: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n    initCodeHash: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n  },\n  [ChainId.RINKEBY]: {\n    factoryAddress: '0x875D0F2ad61803927c087ac2ef82539706f5364C',\n    initCodeHash: '0x4b5b254233f8aba1e01c0538653d54036e3c9f7873daf99623bb358f1cf33188'\n  },\n  [ChainId.AVALANCHE]: {\n    factoryAddress: '0x2Ef422F30cdb7c5F1f7267AB5CF567A88974b308',\n    initCodeHash: '0x4b5b254233f8aba1e01c0538653d54036e3c9f7873daf99623bb358f1cf33188'\n  },\n  [ChainId.FUJI]: {\n    factoryAddress: '0xeEdaAB3cdb85B77430f2272f6cDbaE2020F48c80',\n    initCodeHash: '0x4b5b254233f8aba1e01c0538653d54036e3c9f7873daf99623bb358f1cf33188'\n  },\n  [ChainId.SMART_CHAIN]: {\n    factoryAddress: '0x52AbdB3536a3a966056e096F2572B2755df26eac',\n    initCodeHash: '0x4b5b254233f8aba1e01c0538653d54036e3c9f7873daf99623bb358f1cf33188'\n  },\n  [ChainId.SMART_CHAIN_TEST]: {\n    factoryAddress: '0x2583e5E9c4E0CA0C4F4DfFA5eacC1ce1fC0e277c',\n    initCodeHash: '0x4b5b254233f8aba1e01c0538653d54036e3c9f7873daf99623bb358f1cf33188'\n  }\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n  public static readonly AVAX: Currency = new Currency(18, 'AVAX', 'AVAX')\n  public static readonly BNB: Currency = new Currency(18, 'BNB', 'BNB')\n\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nconst AVAX = Currency.AVAX\nconst BNB = Currency.BNB\nexport { ETHER, AVAX, BNB }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÃ–RLI]: new Token(ChainId.GÃ–RLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.FUJI]: new Token(ChainId.FUJI, '0x4e7a7ffc71Fb28b037f39b5f5cB8aF0bf5cF3B5C', 18, 'WAVAX', 'Wrapped AVAX'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'),\n  [ChainId.SMART_CHAIN]: new Token(ChainId.SMART_CHAIN, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.SMART_CHAIN_TEST]: new Token(ChainId.SMART_CHAIN_TEST, '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd', 18, 'WBNB', 'Wrapped BNB')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { AVAX, BNB, Currency, ETHER } from '../currency'\nimport { BigintIsh, ChainId, Rounding, SolidityType, TEN } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\n\nimport { Fraction } from './fraction'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh, chainId?: ChainId): CurrencyAmount {\n    let currency = ETHER;\n    if (chainId && chainId === ChainId.AVALANCHE || chainId === ChainId.FUJI) {\n      currency = AVAX;\n    }\n    if (chainId && chainId === ChainId.SMART_CHAIN || chainId === ChainId.SMART_CHAIN_TEST) {\n      currency = BNB;\n    }\n    return new CurrencyAmount(currency, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import {\n  BigintIsh,\n  ChainId,\n  FACTORY_AND_INIT,\n  FIVE,\n  MINIMUM_LIQUIDITY,\n  ONE,\n  ZERO,\n  _1000,\n  _997\n} from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\nimport { keccak256, pack } from '@ethersproject/solidity'\nimport { parseBigintIsh, sqrt } from '../utils'\n\nimport JSBI from 'jsbi'\nimport { Price } from './fractions/price'\nimport { Token } from './token'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { getCreate2Address } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    if (PAIR_ADDRESS_CACHE ?.[tokens[0].address] ?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE ?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_AND_INIT[tokens[0] ?.chainId] ?.factoryAddress,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            FACTORY_AND_INIT[tokens[0] ?.chainId] ?.initCodeHash,\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'ZERO-LP',\n      'ZERO-LP-Token'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport {AVAX, BNB, Currency, ETHER} from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        ((input === ETHER || input === AVAX || input === BNB) && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        ((output === ETHER || output === AVAX || output === BNB) && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { AVAX, BNB, Currency, ETHER } from './currency'\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { Token, WETH, currencyEquals } from './token'\n\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Pair } from './pair'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { Route } from './route'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport { sortedInsert } from '../utils'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER || currencyAmount.currency === AVAX || currencyAmount.currency === BNB) {\n    return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  }\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  if (currency === AVAX) return WETH[chainId]\n  if (currency === BNB) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER || route.input === AVAX || route.input === BNB\n          ? CurrencyAmount.ether(amounts[0].raw, route.chainId)\n          : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER || route.output === AVAX || route.output === BNB\n          ? CurrencyAmount.ether(amounts[amounts.length - 1].raw, route.chainId)\n          : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut, this.route.chainId)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn, this.route.chainId)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n          ? currencyOut.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n          ? currencyIn.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport {AVAX, BNB, CurrencyAmount, ETHER, Percent, Trade} from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER || trade.inputAmount.currency === AVAX || trade.inputAmount.currency === BNB\n    const etherOut = trade.outputAmount.currency === ETHER || trade.outputAmount.currency === AVAX || trade.outputAmount.currency === BNB\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","FACTORY_AND_INIT","MAINNET","factoryAddress","initCodeHash","RINKEBY","AVALANCHE","FUJI","SMART_CHAIN","SMART_CHAIN_TEST","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","AVAX","BNB","Token","chainId","equals","other","this","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","ROPSTEN","GÃ–RLI","KOVAN","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE2","getCreate2Address","_tokens$","_FACTORY_AND_INIT$tok","keccak256","pack","_tokens$2","_FACTORY_AND_INIT$tok2","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","runtime","exports","Op","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","method","arg","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","doneResult","displayName","isGeneratorFunction","genFun","ctor","mark","__proto__","awrap","async","Promise","iter","keys","object","reverse","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","Function","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","_TOKEN_DECIMALS_CACHE4","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}